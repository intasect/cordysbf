# This propertyfile contains the proeprties that are needed by the framework.
# !!! DO NOT EDIT THIS FILE !!! as it can be overwritten when an upgrade is done.
# If you want to override properties, do that in either the project.properties
# or the user.proeprties.

# Build options

# Compiler options.
javac.debug    		 = off
javac.optimize   	 = on
javac.deprecation 	 = on
javac.source.version = 1.5
javac.target.version = ${javac.source.version}

# Javadoc options.
javadoc.author  	= true
javadoc.private 	= true
javadoc.use     	= true
javadoc.version 	= true
javadoc.windowtitle	= ${project.name} API

# Skip Generation of Javadocs. Uncomment, if the project 
# does not include any Java source files. You should
# also remove project jar entry from src/content/isv/FileSystem.xml
#skip.javadocs		= true

# ISV package properties
isv.owner		= ${product.vendor}
isv.productname	= ${project.name}
isv.version		= ${project.version}
isv.name		= ${isv.owner} ${project.name} ${isv.version}
isv.filename	= ${isv.owner}_${project.name}

# Properties that define the location of the different level for the buildfiles
sdk.build.framework.dir = ${sdk.dir}/build

# Defines the filter of the different types of content that the ContentManager task should handle.
content.filter		= ${isv.content}

# The userdn's that should be used when sending requests to Cordys.
isv.userdn		= cn=${env.USERNAME},cn=organizational users,${isv.org}
content.userdn		= cn=${env.USERNAME},cn=organizational users,${content.org}

# Where source files are found
src.dir  	= ./src
src.java 	= ${src.dir}/java
src.web 	= ${src.dir}/web
src.content	= ${src.dir}/content
src.content.appcon = ${src.content}/applicationconnectors
src.content.coboc = ${src.content}/coboc
src.content.coboc.folders = ${src.content.coboc}/folders
src.content.dbschema = ${src.content}/dbschema
src.content.isv = ${src.content}/isv
src.content.menus = ${src.content}/menus
src.content.methodsets = ${src.content}/methodsets
src.content.roles = ${src.content}/roles
src.content.soapnodes = ${src.content}/soapnodes
src.content.studio = ${src.content}/studio
src.content.studio.flows = ${src.content.studio}/flows
src.content.studio.xforms = ${src.content.studio}/xforms
src.content.styles = ${src.content}/styles
src.content.toolbars = ${src.content}/toolbars
src.content.users = ${src.content}/users
src.content.xmlstore = ${src.content}/xmlstore
src.content.xas=${src.content}/xas
src.content.localizations=${src.content}/localization
src.content.xreports=${src.content}/xreports
src.site=${src.dir}/site

# This controls wheter all XMLStore contents are pretty printed when exported from BCP.
xmlstore.format.content = true

# Where test files are found
test.dir  	= ./test
test.java 	= ${test.dir}/java
test.include.stubs = false

# Where documentation is found
docs.dir			= ./docs
docs.internal		= ${docs.dir}/internal
docs.external		= ${docs.dir}/external
docs.external.dist	= ${docs.dir}/external-dist

# Where jar files are found.

lib.dir	= ./lib
lib.config = ${lib.dir}/config
lib.checksum.file=${lib.config}/file-checksums.properties
lib.bf.version.file=${lib.config}/bf.version
sdk.dir	= ./sdk
sdk.lib.dir = ${sdk.dir}/lib
sdk.build.dir = ${sdk.dir}/build
sdk.build.site = ${sdk.build.dir}/site
sdk.build.test.dir = ${sdk.build.dir}/test
sdk.test.stubs.dir = ${sdk.build.test.dir}/stubs
platform.dir = ./platform

# Intermediate directory for building class files.
build.dir     		= ./build
build.classes 		= ${build.dir}/classes
build.jar	  		= ${build.dir}/jar
build.web	  		= ${build.dir}/web
build.test    		= ${build.dir}/test
build.docs    		= ${build.dir}/documentation
build.apidocs 		= ${build.dir}/apidocs
build.isv			= ${build.dir}/isv
build.content		= ${build.dir}/content
build.junitreports 	= ${build.dir}/junit-reports
build.test.classes 	= ${build.dir}/testclasses
build.bin			= ${build.dir}/bin
build.localizations	= ${build.dir}/localization
build.xreports		= ${build.dir}/xreports
build.site	 		= ${build.dir}/site

# Custom stylesheet for the JUnit reports.
junit.custom.css=${sdk.build.dir}/junit-css.css
junit.report.remove.properties = true

# The resulting Studio vcmdata file that has all the vcmdata files merged into it.
build.studio.isv.filename = ${build.dir}/${isv.owner}_${project.name}_${isv.version}.vcmdata

# Where the distributable of the project is placed.
dist.dir      	= ./dist
dist.docs     	= ${dist.dir}/docs
dist.apidocs	= ${dist.docs}/api
dist.setup    	= ${dist.dir}/setup
dist.site 		= ${dist.dir}/site
dist.reports.junit	= ${dist.docs}/reports/junit
dist.reports.cobertura	= ${dist.docs}/reports/cobertura

# Indicates whether or not the distribution should include the complete source of the project.
dist.include.sources = false

# SubVersion Integration
svn.project = http://srv-nl-apps7:5001/svn/coe_rep/Customers/Name/Project
svn.main = ${svn.project}/main
svn.branches = ${svn.project}/branches
svn.label = build
svn.username = ${env.USERNAME}

# Properties for the Cobertura code coverage checker.
build.cobertura					= ${build.dir}/cobertura
build.cobertura.instrumented 	= ${build.cobertura}/instrumented
build.cobertura.report 			= ${build.cobertura}/report

# The default postfix for snapshot builds
snapshot.version.prefix=
snapshot.version.postfix=-SNAPSHOT
release.version.prefix=
release.version.postfix=

# Properties for the Version.java generation.
# To enable automatic generation of the version java file set the
# versionfile.generate to true in your project.properties. Also
# make sure you set the rest of the versionfile properties properly
# in the project.properties.
versionfile.generate=false

# Remaining properties for the version file.
versionfile.class.package=com.cordys.coe
versionfile.class.name=Version
versionfile.productname=${product.name}
versionfile.template=${sdk.dir}/build/Version.java

# Maven integration section.
# The properties below can be added in the project.properties to enable 
# the publishing of binaries to a maven repository. By default the maven
# integration is disabled.
# To enable it, set the property skip.publish to false in the project.properties.
skip.publish=true
 
# If set to true, release build will check if there is an entry
# in the changelog.xml for that version before creating the build.
build.force.changelog = false

# Project web site setting.
project.site.enabled = false
project.site.url = http://myserver/project-sites/myproject
project.site.builds.dirname = builds
project.site.builds.relpath.prefix = ${project.site.builds.dirname}/build-
project.site.builds.root.url = ${project.site.url}/${project.site.builds.dirname}
project.site.deploy.ftp.hostname = myserver
project.site.deploy.ftp.port = 21
project.site.deploy.ftp.username = username
project.site.deploy.ftp.password = 
project.site.downloadarea.title = CoE Download Area
project.site.project.index.path = ..
project.site.style.path = ${project.site.project.index.path}/skin
project.site.maintenance.dirname = maintenance
project.site.modules.dirname = modules
project.site.subfolder =

# Indicates whether or not a zip should be created with the sources of the project
include.source=false

# Indicates the folder where to deploy the classes for the tocordys classes.
user.classdir=${cordys.home}\\${project.deploy}\\classes

# Properties for the 'tocordys devclasses' target :
#   dev.classes.destination 		- Classes are copied to this folder.
#   dev.classes.restart.action		- Optional action to be performed after classes are copied.
#		Possible values are:
#			wsappserver-reload-classes 	- Calls the Ws-AppServer ReloadClasses in the current organization.
#										  Note that the classes must be copied to the 
# 										  CORDYS_HOME/bsf/runtime/deploy folder.
#			restart-soapprocessor		- Restarts the SOAP processor given with property 'dev.classes.restart.soapnode.dn'
#										  Note that this DN only includes the SOAP processor and SOAP node parts, 
#										  e.g. cn=soap processor,cn=soap node
#		Leave this parameter empty, if no action is needed.
dev.classes.destination				= ${cordys.home}/bsf/runtime/deploy
dev.classes.restart.action			= wsappserver-reload-classes
dev.classes.restart.soapnode.dn 	= 

# Used to override the BCP version read from the server. Format is: 'BCP 4.2 C2 FP4' or BCP 4.2 C3'
platform.version.string = 

# Lists content types allowed for fromcordys, tocordys and deletecordys commands. 
# Format is: 
#     content.allow.fromcordys = type[allow|deny|prompt]
# Multple types can be defined in one property e.g:
#     content.allow.tocordys = all[prompt] xforms[deny] roles[allow]
# In this case 'tocordys all' would prompt for an action, 'tocordys xforms' would
# give an error (not allowed) and 'tocordys roles' would always be executed without a prompt. 
content.allow.fromcordys = all[allow]
content.allow.tocordys = all[allow]
content.allow.deletecordys = all[allow]
content.allow.toruntime = all[allow]
content.prompt.fromcordys = Are you sure you want to copy the content to file system [Yes/No]
content.prompt.tocordys = Are you sure you want to send the content to Cordys [Yes/No]
content.prompt.deletecordys = Are you sure you want to delete the content from Cordys [Yes/No]
content.prompt.toruntime = Are you sure you want to publish the content to runtime [Yes/No]


