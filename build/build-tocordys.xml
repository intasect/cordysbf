<!-- Contains targets for importing content to BCP -->

<project name="tocordys-content-project" default="tocordys-all">
	<import file="${sdk.build.framework.dir}/content-filters.xml" />

	<!--Target for importing contents from File System to ECX -->
  	<target name="tocordys-all"
  			description="Imports the contents from File System to ECX">
  		<check-cordys-operation contenttype="all" operation="tocordys" />
  		
    	<contentmanager
 	    	organization="${content.org}"
	    	userdn="${content.userdn}"
   			operation="filetoecx"
   			filter="${content.filter}"
   			host="${ldap.server}"
	    	port="${ldap.port}"
	    	password="${ldap.password}"
	    	username="${ldap.user}"
   		>
   			<content type="roles">
   				<fileset dir="${src.content.roles}">
   					<patternset refid="all.non.cvs.files" />
					<patternset refid="all.non.vss.files" />
   					<patternset refid="all.non.svn.files" />
				</fileset>
   			</content>
   			<content type="menus">
   				<fileset dir="${src.content.menus}">
   					<patternset refid="all.non.cvs.files" />
					<patternset refid="all.non.vss.files" />
   					<patternset refid="all.non.svn.files" />
				</fileset>
   			</content>
   			<content type="toolbars">
   				<fileset dir="${src.content.toolbars}">
   					<patternset refid="all.non.cvs.files" />
					<patternset refid="all.non.vss.files" />
   					<patternset refid="all.non.svn.files" />
				</fileset>
   			</content>
   			<content type="xmlstore">
   				<fileset dir="${src.content.xmlstore}">
   					<patternset refid="all.non.cvs.files" />
					<patternset refid="all.non.vss.files" />
   					<patternset refid="all.non.svn.files" />
				</fileset>
   			</content>
   			<content type="applicationconnectors">
   				<fileset dir="${src.content.appcon}">
   					<patternset refid="all.non.cvs.files" />
					<patternset refid="all.non.vss.files" />
   					<patternset refid="all.non.svn.files" />
				</fileset>
   			</content>
   			<content type="styles">
   				<fileset dir="${src.content.styles}">
   					<patternset refid="all.non.cvs.files" />
					<patternset refid="all.non.vss.files" />
   					<patternset refid="all.non.svn.files" />
				</fileset>
   			</content>
    		<content type="studio-xforms" dir="${src.content.studio.xforms}" />
    		<content type="studio-bpms" dir="${src.content.studio.flows}">
				<patternset refid="studio.bpm.path.filter" />
			</content>
    		<content type="${handler.coboc}" dir="${src.content.coboc.folders}">
				<patternset refid="coboc.folders.path.filter" />
			</content>
   			<content type="methodsets">
   				<fileset dir="${src.content.methodsets}">
   					<patternset refid="all.non.cvs.files" />
					<patternset refid="all.non.vss.files" />
   					<patternset refid="all.non.svn.files" />
				</fileset>
   			</content>
   			<content type="xreports" dir="${src.content.xreports}">
   				<patternset refid="xreports.path.filter" />
   			</content>
    		<content type="${handler.xas}" dir="${src.content.xas}" />
			<content type="localizations" dir="${src.content.localizations}">
				<patternset refid="localizations.path.filter" />
			</content>
    	</contentmanager>
  	</target>
	
	<!-- Target for importing just the methodsets. -->
		<target name="tocordys-methodsets"
		  			description="Imports the methodsets from File System to ECX">
			<check-cordys-operation contenttype="methodsets" operation="tocordys" />
		  				
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	   			<content type="methodsets">
	   				<fileset dir="${src.content.methodsets}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
	   			</content>
	    	</contentmanager>
	  	</target>

	<!-- Target for importing just the localizations. -->
		<target name="tocordys-localizations"
		  			description="Imports the localizations from File System to ECX">
			<check-cordys-operation contenttype="localizations" operation="tocordys" />
		
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
				<content type="localizations">
					<fileset dir="${src.content.localizations}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
				</content>
	    	</contentmanager>
	  	</target>
	  	
	<target name="tocordys-xreports" description="Imports the XReports from File System to ECX">
		<check-cordys-operation contenttype="xreports" operation="tocordys" />
		
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	  	   		<content type="xreports" dir="${src.content.xreports}">
   					<patternset refid="xreports.path.filter" />
   				</content>
	    	</contentmanager>
	  	</target>
	  	
		<!-- Target for importing just the organization users. -->	
		<target name="tocordys-users"
		  			description="Imports the organizational users from File System to ECX">
			<check-cordys-operation contenttype="users" operation="tocordys" />
						
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	   			<content type="users">
	   				<fileset dir="${src.content.users}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
	   			</content>
	    	</contentmanager>
	  	</target>

		<!-- Target for importing just the roles. -->	
		<target name="tocordys-roles"
		  			description="Imports the roles from File System to ECX">
			<check-cordys-operation contenttype="roles" operation="tocordys" />		
		  		
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	   			<content type="roles">
	   				<fileset dir="${src.content.roles}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
	   			</content>
	    	</contentmanager>
	  	</target>
		
		<!-- Target for importing just the menus. -->	
		<target name="tocordys-menus"
		  			description="Imports the menus from File System to ECX">
			<check-cordys-operation contenttype="menus" operation="tocordys" />
			
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	   			<content type="menus">
	   				<fileset dir="${src.content.menus}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
	   			</content>
	    	</contentmanager>
	  	</target>
	
		<!-- Target for importing just the toolbars. -->	
		<target name="tocordys-toolbars"
		  			description="Imports the toolbars from File System to ECX">
	  		<check-cordys-operation contenttype="toolbars" operation="tocordys" />
		  				
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	   			<content type="toolbars">
	   				<fileset dir="${src.content.toolbars}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
	   			</content>
	    	</contentmanager>
	  	</target>	

		<!-- Target for importing just the xmlstore content. -->
		<target name="tocordys-xmlstore"
		  			description="Imports the xmlstore contents from File System to ECX">
    		<check-cordys-operation contenttype="xmlstore" operation="tocordys" />
		    		
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	   			<content type="xmlstore">
	   				<fileset dir="${src.content.xmlstore}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
	   			</content>
	    	</contentmanager>
	  	</target>

		<!-- Target for importing just the application connectors. -->
		<target name="tocordys-applicationconnectors"
		  			description="Imports the application connectors from File System to ECX">
			<check-cordys-operation contenttype="applicationconnectors" operation="tocordys" />	
		  			
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	   			<content type="applicationconnectors">
	   				<fileset dir="${src.content.appcon}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
	   			</content>
	    	</contentmanager>
	  	</target>

		<!-- Target for importing just the styles. -->	
		<target name="tocordys-styles"
		  			description="Imports the styles from File System to ECX">
			<check-cordys-operation contenttype="styles" operation="tocordys" />
		  				
	    	<contentmanager
	 	    	organization="${content.org}"
		    	userdn="${content.userdn}"
	   			operation="filetoecx"
	   			filter=""
	   			host="${ldap.server}"
		    	port="${ldap.port}"
		    	password="${ldap.password}"
		    	username="${ldap.user}"
	   		>
	   			<content type="styles">
	   				<fileset dir="${src.content.styles}">
	   					<patternset refid="all.non.cvs.files" />
	   					<patternset refid="all.non.vss.files" />
	   					<patternset refid="all.non.svn.files" />
					</fileset>
	   			</content>
	    	</contentmanager>
	  	</target>
	
	<!-- 
		Target for importing CoBOC content. The property coboc.path.filter 
	     must be set before this target can be run.
	-->
	<target name="tocordys-coboc" 
  			description="Imports the CoBOC contents from File System to ECX">
		<check-cordys-operation contenttype="coboc" operation="tocordys" />
			
    	<contentmanager
 	    	organization="${content.org}"
	    	userdn="${content.userdn}"
   			operation="filetoecx"
   			filter=""
   			host="${ldap.server}"
	    	port="${ldap.port}"
	    	password="${ldap.password}"
	    	username="${ldap.user}"
   		>
			<content type="${handler.coboc}" dir="${src.content.coboc.folders}">
				<patternset refid="coboc.folders.path.filter" />
			</content>		    		
    	</contentmanager>
  	</target>	

	<!-- 
		Target for importing Studio BPM content.
	-->
	<target name="tocordys-flows" 
  			description="Imports the Studio BPM contents from File System to ECX">
		<check-cordys-operation contenttype="flows" operation="tocordys" />	
  			
    	<contentmanager
 	    	organization="${content.org}"
	    	userdn="${content.userdn}"
   			operation="filetoecx"
   			filter=""
   			host="${ldap.server}"
	    	port="${ldap.port}"
	    	password="${ldap.password}"
	    	username="${ldap.user}"
   		>
			<content type="studio-bpms" dir="${src.content.studio.flows}">
				<patternset refid="studio.bpm.path.filter" />
			</content>
    	</contentmanager>
  	</target>
	
	<!-- 
		Target for importing Studio XForms content.
	-->
	<target name="tocordys-xforms" 
  			description="Imports the Studio XForms contents from File System to ECX">
		<check-cordys-operation contenttype="xforms" operation="tocordys" />
  				
    	<contentmanager
 	    	organization="${content.org}"
	    	userdn="${content.userdn}"
   			operation="filetoecx"
   			filter=""
   			host="${ldap.server}"
	    	port="${ldap.port}"
	    	password="${ldap.password}"
	    	username="${ldap.user}"
   		>
			<content type="studio-xforms" dir="${src.content.studio.xforms}" />
    	</contentmanager>
  	</target>	
	
	<!--Target for importing all SOAP nodes under the organization from file system to ECX -->
  	<target name="tocordys-soapnodes"
  			description="Imports all SOAP nodes from file system to ECX">
		<check-cordys-operation contenttype="soapnodes" operation="tocordys" />
  				
    	<contentmanager
 	    	organization="${content.org}"
	    	userdn="${content.userdn}"
   			operation="filetoecx"
   			filter=""
   			host="${ldap.server}"
	    	port="${ldap.port}"
	    	password="${ldap.password}"
	    	username="${ldap.user}"
   		>
			<content type="soapnodes" dir="${src.content.soapnodes}" />
    	</contentmanager>
  	</target>
	
	<target name="tocordys-xas"
  			description="Imports all XAS content from file system to ECX">
		<check-cordys-operation contenttype="xas" operation="tocordys" />
	
    	<contentmanager
 	    	organization="${content.org}"
	    	userdn="${content.userdn}"
   			operation="filetoecx"
   			filter=""
   			host="${ldap.server}"
	    	port="${ldap.port}"
	    	password="${ldap.password}"
	    	username="${ldap.user}"
   		>
			<content type="${handler.xas}" dir="${src.content.xas}" />
    	</contentmanager>
	</target>
	
	<!-- This target copies all compiled things to local folders -->
	<target name="tocordys-classes" depends="compile">
		<check-cordys-operation contenttype="classes" operation="tocordys" />
	
		<copy overwrite="true" todir="${user.classdir}">
			<fileset dir="${build.classes}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>
	
	<!--Target for deploying web resources to the Cordys web folder-->
	<target name="tocordys-web"
			description="Copies web resources to the Cordys web folder">
		<check-cordys-operation contenttype="web" operation="tocordys" />
				
		<delete dir="${cordys.home}/Web/${project.web.name}"/>
		<copy todir="${cordys.home}/Web/${project.web.name}">
			<fileset dir="${src.web}">
				<patternset refid="all.non.cvs.files" />
				<patternset refid="all.non.vss.files" />
				<patternset refid="all.non.svn.files" />
			</fileset>
		</copy>
	</target>
	
	<!--
		Target for copying development classes to the BCP. 
		This target can restart a SOAP processor or call the 
		Ws-AppServer ReloadClasses method. This action is
		configured with parameter 'dev.classes.restart.action':
		  restart-soapprocessor - Restarts the SOAP processor given with property 'dev.classes.restart.soapnode.dn'.
		  						  Note that this DN only includes the SOAP processor and SOAP node parts.
		  wsappserver-reload-classes - Calls the Ws-AppServer ReloadClasses method in the current organization.
		                               Optionally the SOAP processor DN can be given with property 'dev.classes.restart.soapnode.dn'.
		                               Note that this DN must be the full DN unline with 'restart-soapprocessor'.
		
		Classes to be copied are taken from a defined fileset with ID 'user.devclasses.fileset'. This
		file set must be defined in build-user.xml or build-project.xml. 
	-->
	<target name="tocordys-devclasses"
			description="Target for copying development classes to the BCP. This target can restart a SOAP processor or call the Ws-AppServer ReloadClasses method.">
	  	<check-cordys-operation contenttype="devclasses" operation="tocordys" />
			
		<fail message="Define fileset with ID 'user.devclasses.fileset' in your build-user.xml or build-project.xml file.">
			<condition>
				<not>
					<isreference refid="user.devclasses.fileset" />
				</not>
			</condition>
		</fail>
		
		<copy todir="${dev.classes.destination}">
			<fileset refid="user.devclasses.fileset" />
		</copy>
		
		<if>
			<equals arg1="${dev.classes.restart.action}" arg2="wsappserver-reload-classes" />
			<then>
				<soapdispatcher soapprocessordn="${dev.classes.restart.soapnode.dn}">
					<![CDATA[					
						<ReloadClasses xmlns="http://schemas.cordys.com/WS-AppServer/1.0"/>						
					]]>
 				</soapdispatcher>
				<echo>Ws-AppServer classes reloaded succesfully.</echo>
			</then>
			<else>
				<if>
					<equals arg1="${dev.classes.restart.action}" arg2="restart-soapprocessor" />
					<then>
						<check-property property="dev.classes.restart.soapnode.dn" />
						<monitor 
							operation="restart"
							organization="${content.org}"
					    	userdn="${content.userdn}"
							ldaphost="${ldap.server}"
					    	ldapport="${ldap.port}"
					    	ldappassword="${ldap.password}"
					    	ldapuser="${ldap.user}"
						>
							<processor dn="${dev.classes.restart.soapnode.dn}" /> 
						</monitor>
						<echo>SOAP processor restarted succesfully.</echo>
					</then>
				</if>
			</else>
		</if>
	</target>	
	
	<!--Target for creating a new Cordys organization -->
	<target name="create-cordys-organization"
			description="Creates a new cordys organization. The authenticated user must be a system administrator.">
		<extractldapproperties 
			userdn="${content.userdn}"
			usernameproperty="new.content.username"
			orgnameproperty="new.content.org.name"
			ldaprootproperty="new.content.ldap.root" />
		
		<soapdispatcher 
			requestFile="${sdk.dir}/config/soapmessages/CreateOrganization.xml"
 	    	orgdn="o=system,${new.content.ldap.root}"
	    	userdn="cn=${new.content.username},cn=organizational users,o=system,${new.content.ldap.root}"
   			ldaphost="${ldap.server}"
	    	ldapport="${ldap.port}"
	    	ldappassword="${ldap.password}"
	    	ldapuser="${ldap.user}"
			failOnSoapFault="false"
			/>
	</target>
</project>