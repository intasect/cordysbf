<project default="new-project" basedir=".">
	<property environment="env" />
	<property file="${additional.properties}" />
	<property file="${src.sdk.folder}/build/new/newproject.properties" />
	
	<!--Classpath used for compiling sources -->
	<path id="classpath">
		<fileset dir="${src.sdk.folder}">    
            <include name="**/*.jar"/>
        </fileset>
		<fileset dir="${src.platform.folder}">    
            <include name="**/*.jar"/>
        </fileset>
    </path>
	
	<!--Pattern set which matches all Non Subversion folders -->
	<patternset id="all.non.svn.files">
		<include name="**/*" />
		<exclude name="**/.svn/**" />
	</patternset>
    
	<!-- Import the current tasks that are part of the build framework. -->
	<import file="${src.sdk.folder}/build/task-defs.xml"/>
	
	<!--
		Macro to check the value of a certain property for true and if it's true
		add a defined.<propertyname> to the project.
	-->
	<macrodef name="defflag">
		<attribute name="property" />
		<attribute name="dest-property" default="defined.@{property}" />        
		<sequential>
			<condition property="@{dest-property}">
				<istrue value="${@{property}}"/>
			</condition>
		</sequential>
	</macrodef>

	<!--
		This target displays informational messages about what it is going to do.
	-->
	<target name="check-parameters">
		<defflag property="create.svn"/>
		<defflag property="create.svn.externals"/>
	</target>
	
	<!--
		This target displays informational messages about what it is going to do.
	-->
	<target name="init-new" depends="check-parameters">
		<echo>Starting the new project creation</echo>
		<echo>New project root: '${project.root}'</echo>
		<echo>Base SDK folder: '${src.sdk.folder}'</echo>
		<echo>Base Platform folder: '${src.platform.folder}'</echo>
		<echo>Source Property File: '${source.property.file}'</echo>
		<echo>Creating project in SubVersion: ${create.svn}</echo>
		<echo>Setting up the SVN externals: ${create.svn.externals}</echo>
		<echo>SVN username: ${svn.username}</echo>
		<echo>Build framework version:</echo>
		<bfversion/>
	</target>

	<!--
		This target creates a new project.
	-->
	<target name="new-project" depends="init-new,clean-project-root,create-folders,copy-bf-basefiles,setproperties,load-properties,fix-eclipsefiles,copy-sdk-folder,copy-platform-folder,set-version,svn-share-project,svn-set-externals">
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
		This target creates the basic folder structure which is needed for the build framework
		structure.
		- - - - - - - - - - - - - - - - - -->
	<target name="create-folders" description="Creates the Cordys project folder structure."> 
	    <mkdir dir="${project.classes}" />
	    <mkdir dir="${project.root}/docs" />
	    <mkdir dir="${project.root}/docs/internal" />
	    <mkdir dir="${project.root}/docs/external" />
	    <mkdir dir="${project.root}/lib" />
	    <mkdir dir="${project.root}/lib/config" />
	    <mkdir dir="${project.root}/src" />
	    <mkdir dir="${project.root}/src/content" />
	    <mkdir dir="${project.root}/src/content/applicationconnectors" />
	    <mkdir dir="${project.root}/src/content/coboc" />
	    <mkdir dir="${project.root}/src/content/coboc/folders" />
	    <mkdir dir="${project.root}/src/content/studio" />
	    <mkdir dir="${project.root}/src/content/studio/flows" />
	    <mkdir dir="${project.root}/src/content/studio/xforms" />
	    <mkdir dir="${project.root}/src/content/dbschema" />
	    <mkdir dir="${project.root}/src/content/isv" />
	    <mkdir dir="${project.root}/src/content/menus" />
	    <mkdir dir="${project.root}/src/content/methodsets" />
	    <mkdir dir="${project.root}/src/content/roles" />
	    <mkdir dir="${project.root}/src/content/styles" />
	    <mkdir dir="${project.root}/src/content/xmlstore" />
	    <mkdir dir="${project.root}/src/content/soapnodes" />
	    <mkdir dir="${project.root}/src/content/toolbars" />
	    <mkdir dir="${project.root}/src/content/localization" />
	    <mkdir dir="${project.root}/src/content/xas" />
	    <mkdir dir="${project.root}/src/content/xreports" />
	    <mkdir dir="${project.root}/src/java" />
	    <mkdir dir="${project.root}/src/web" />
	    <mkdir dir="${project.root}/test" />
	    <mkdir dir="${project.root}/test/java" />
	</target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: clean-project-root
          
          This target cleans everything form the project root folder.
         - - - - - - - - - - - - - - - - - -->
    <target name="clean-project-root">
    	<delete failonerror="false">
    		<fileset dir="${project.root}">
    			<exclude name=".classpath" />
    			<exclude name=".project" />
    		</fileset>
		</delete>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: load-properties
          
          This target loads the modified project properties.
         - - - - - - - - - - - - - - - - - -->
    <target name="load-properties">
    	<property file="${project.root}/user.properties" />
    	<property file="${project.root}/project.properties" />
    	<property file="${src.sdk.folder}/build/framework.properties" />
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: set-version
          
          This target creates the bf.version file in the lib/config folder
         - - - - - - - - - - - - - - - - - -->
    <target name="set-version">
		<getbfinfo/>
    	<echo file="${project.root}/lib/config/bf.version" message="bf.version=${coe.bf.fullversion}"/>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copy-bf-basefiles
          
          This target copies the base files needed for the build framework.
         - - - - - - - - - - - - - - - - - -->
	<target name="copy-bf-basefiles" description="Copies all build framework files to the project.">
		<!-- Copy the files that should go in the project root -->
		<copy todir="${project.root}">	
			<fileset dir="${src.sdk.folder}/build/new/base">
				<patternset refid="all.non.svn.files" />
			</fileset>
		</copy>
		
       	<!-- Copy the ISV-content files -->
		<copy todir="${project.src.content.isv}">
			<fileset dir="${src.sdk.folder}/build/new/isvfiles">
				<patternset refid="all.non.svn.files" />
			</fileset>
		</copy>
	</target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: setproperties
         - - - - - - - - - - - - - - - - - -->
    <target name="setproperties" if="source.property.file">
    	<setprojectproperties projectFolder="${project.root}" sourcePropertyFile="${source.property.file}"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: copy-sdk-folder
          
          This target copies the sdk folder if the project is not shared via svn:externals.
         - - - - - - - - - - - - - - - - - -->
    <target name="copy-sdk-folder" unless="defined.create.svn.externals">
		<copy todir="${project.sdk}">
			<fileset dir="${src.sdk.folder}">
				<patternset refid="all.non.svn.files" />
			</fileset>
    	</copy>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: copy-platform-folder
          
          This target copies the platform folder if the project is not shared via svn:externals.
         - - - - - - - - - - - - - - - - - -->
    <target name="copy-platform-folder" unless="defined.create.svn.externals">
		<copy todir="${project.platform}">
			<fileset dir="${src.platform.folder}">
				<patternset refid="all.non.svn.files" />
			</fileset>
    	</copy>
    </target>
	
	<!-- 
          target: svn-share-project
          
          This task adds the project to subversion under the given URL.
    -->
    <target name="svn-share-project" depends="svn_set-and-check" if="defined.create.svn">
    	<svn username="${svn.username}">
			<mkdir url="${svn.main}" makeParents="true" message="Created new project ${project.name}"/>
    		<mkdir url="${svn.branches}" makeParents="true" message="Created new project ${project.name}"/>
			<checkout url="${svn.main}" destPath="${project.root}"/>
			<propset path="${project.root}" name="svn:ignore" value="${project.svn.ignore.root}" />
    		<commit dir="${project.root}" message="Creating a new project. Commit after setting svn:ignore" recurse="true"/>
			<add recurse="true">
				<fileset dir="${project.root}">
				  	<include name="**/*"/>
				  	<exclude name="build"/>
				  	<exclude name="dist"/>
				  	<exclude name="user.properties"/>
				  	<exclude name="set-environment-vars.cmd"/>
				</fileset>
			</add>
    		<commit dir="${project.root}" message="Creating a new project. Commit after adding all files" recurse="true"/>
    		<update dir="${project.root}"/>
			<propset path="${project.classes}" name="svn:ignore" value="${project.svn.ignore.classes}" />
    		<commit dir="${project.root}" message="Creating a new project. Commit after adding all files" recurse="true"/>
		</svn>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: svn_set-and-check
          
          This target checks if all the needed information is there to be able to 
          share the project to SubVersion.
         - - - - - - - - - - - - - - - - - -->
    <target name="svn_set-and-check">
    	<checksvnprops/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: fix-eclipsefiles
         - - - - - - - - - - - - - - - - - -->
    <target name="fix-eclipsefiles">
		<createeclipsefiles projectFolder="${project.root}"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: svn-set-externals
          
          This target sets the externals that should be used.
         - - - - - - - - - - - - - - - - - -->
    <target name="svn-set-externals" if="defined.create.svn.externals">
		<echo>Setting up the externals</echo>
    	<!-- 
    		We need to make sure that:
    		1. The properties svn.externals.platform and svn.externals.sdk are set.
    		2. Make sure that both URLs do actually exist.
    	-->
    	<fail unless="svn.externals.sdk" message="Property svn.externals.sdk must point to the base location of the externals for the SDK folder."/>
    	<fail unless="svn.externals.platform" message="Property svn.externals.platform must point to the base location of the externals for the SDK folder."/>
    	<svn username="${svn.username}">
    		<coeexists url="${svn.externals.sdk}" failsOnNotExists="true"/>
    		<coeexists url="${svn.externals.platform}" failsOnNotExists="true"/>
    	</svn>
    	<echo>All prerequisites are available.</echo>
    	<echo>SDK location: ${svn.externals.sdk}</echo>
    	<echo>Platform location: ${svn.externals.platform}</echo>
    	<createmultilineproperty propertyDestination="svn.externals.root">
    		<mlptext message="platform "/>
   			<mlptext message="${svn.externals.platform} "/>
    		<mlpnewline/>
    		<mlptext message="sdk "/>
    		<mlptext message="${svn.externals.sdk}"/>
    		<mlpnewline/>
    	</createmultilineproperty>
    	
    	<!-- Now setting the properties. -->
    	<svn username="${svn.username}">
    		<update dir="${project.root}" />
			<propset path="${project.root}"
					 name="svn:externals"  
					 value="${svn.externals.root}" />
		</svn>
					 	
		<svn username="${svn.username}">
			<commit dir="${project.root}" recurse="true"
					message="Creating a new project. Commit after setting svn:externals"/>
		</svn>	
					 	
		<svn username="${svn.username}">
			<update dir="${project.root}" />
		</svn>	
    </target>
</project>
