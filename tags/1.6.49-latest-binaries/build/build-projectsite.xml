<!--
	The default build file for Ant.
	!!DO NOT EDIT THIS FILE!!
	This file can be overwritten when an upgrade of the framework is done.
	
	Customizations should be done in the build-project.xml or the build-user.xml.
-->
<project default="deploy-site"
         basedir="."
>	
	<!-- ================================= 
         target: non.project.site.content
         
         Defines all content in the project site folder that is not part of the
         site HTML pages. These files are excluded when the site content is deleted
         before a new version is deployed.
        ================================= -->
	<fileset id="non.project.site.content">
		<exclude name="${project.site.builds.dirname}/**" />
		<exclude name="${project.site.maintenance.dirname}/**" />
		<exclude name="${project.site.modules.dirname}/**" />
	</fileset>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: _checkdefined
          
          This target executes the defflag macro on all properties that have true or false values.
          The macro is defined in the task-defs.xml file
         - - - - - - - - - - - - - - - - - -->
    <target name="_checkdefined">
    	<defflag property="project.site.enabled" />
    	<defflag property="build.force.changelog" />
    	<available file="changelog.xml" property="changelog.file.exists"></available>
    </target>
	
	<!-- ================================= 
         target: _check_site_root_folder
         
         Finds out the real root folder for this project. If the subfolder (maintance of module) is set, 
    	 then thatis used, otherwise the project root folder.
        ================================= -->
    <target name="_check_site_root_folder" if="project.site.enabled">
		<if>
			<and>
				<isset property="project.site.subfolder" />
				<not><equals arg1="${project.site.subfolder}" arg2="" /></not>
			</and>
			<then>
				<!-- Set the root to the subfolder -->
				<property name="project.site.real.root" value="${project.site.subfolder}/" />
				<property name="project.site.real.url" value="${project.site.url}/${project.site.subfolder}" />
			</then>
			<else>
				<!-- Use the root folder as-is -->
				<property name="project.site.real.root" value="" />
				<property name="project.site.real.url" value="${project.site.url}" />
			</else>
		</if>    	
    	
    	<echo>Project site root folder: ${project.site.real.root}</echo>
		<echo>Project site URL: ${project.site.real.url}</echo>
	</target>    	
	
	<!-- ================================= 
         target: _check_changelog
         
         Checks that the changelog.xml has been filled for
         the current release.
        ================================= -->
	<target name="_check_changelog" 
		    depends="_checkdefined,_update_changelog"
		    if="defined.build.force.changelog">
		<xpathselect file="changelog.xml"
					 xpath="/document/body/release[@version='${version.full}']/action/@*"
					 setalways="false"
					 property="tmp.changelog.set" />

		<fail message="Add at least one action entry to changelog.xml for release ${version.full}">
			<condition>
				<not>
					 <isset property="tmp.changelog.set" />
				</not>
			</condition>
		</fail>
	</target>
	
	<!-- ================================= 
         target: _update_changelog
         
         Updates the changelog.xml file to contain the latest build number and build date.
         This also adds a new template entry for the next release.
        ================================= -->
	<target name="_update_changelog"
		    if="changelog.file.exists">
		<!-- Check that we don't already have a release with this version -->
		<xpathselect file="changelog.xml"
					 xpath="/document/body/release[@version='${version.full}']/@version"
					 setalways="false"
					 property="tmp.current.changelog.set" />

		<!-- If not, set the new version and date to the next release entry -->
		<if>
			<not>
				<isset property="tmp.current.changelog.set" />
			</not>
			<then>
				<tstamp>
					<format property="changelog.timestamp" pattern="yyyy-MM-dd" />
				</tstamp>
				
				<xmltask source="changelog.xml" dest="changelog.xml"> 
					<attr path="/document/body/release[@version='@NEXT@']" attr="date" value="${changelog.timestamp}" />
					<attr path="/document/body/release[@version='@NEXT@']" attr="version" value="${version.full}" />
					
				    <insert path="/document/body/release[1]" position="before"> 
				    	<![CDATA[ 
				<release version="@NEXT@" description="Development release">
				</release>
						]]> 
				    </insert> 
				</xmltask> 
				
				<!-- Commit the new changelog to the repository -->
				<if>
					<isset property="defined.using.svn" />
					<then>
						<svn username="${svn.username}">
							<commit message="Updated the changelog release information (build ${version.full})">
								<fileset file="changelog.xml" />
							</commit>
						</svn>			
					</then>
				</if>					
			</then>
		</if>
	</target>
				
	<!-- ================================= 
         target: _create-build-info
         
         Creates build-info.xml file from the dist folder files
        ================================= -->
	<target name="_create-build-info"
		    depends="_prepare-site-build-folder">
		<tstamp>
			<format property="build.info.date" pattern="yyyy-MM-dd'T'HH:mm:ss" />
		</tstamp>	
		
		<!-- Set properties for the build info file -->
		<property name="build.info.relative.build.path" 
			      value="${project.site.builds.relpath.prefix}${version.full}" />
		
		<freemarker-render destination="${dist.dir}">
			<fileset dir="${build.site}/custom">
				<include name="build-info.xml.ftl" />
			</fileset> 			
		</freemarker-render>
	</target>	
	
	<!-- ================================= 
         target: _merge-build-info
         
         Merges build-info.xml files from older releases into one file.
        ================================= -->
	<target name="_merge-build-info" 
		    depends="_download-project-info">
		<mkdir dir="${build.dir}" />
		
		<mergebuildinfo destfile="${build.dir}/build-info-list.xml">
			<fileset dir="${build.dir}/old-builds">
				<include name="**/build-info.xml" />	
			</fileset>
		</mergebuildinfo>
	</target>
	
	
	<!-- ================================= 
         target: _download-project-info
         
         Downloads build-info.xml and rss.xml files from the project site with FTP.
        ================================= -->
	<target name="_download-project-info" depends="_check_site_root_folder">
		 <delete dir="${build.dir}/old-builds" />
		 <mkdir dir="${build.dir}/old-builds" />

		  <ftp action="get"
		       server="${project.site.deploy.ftp.hostname}"
		       port="${project.site.deploy.ftp.port}"
		       userid="${project.site.deploy.ftp.username}"
		       password="${project.site.deploy.ftp.password}"
		  	   remotedir="${project.site.real.root}">
		    <fileset dir="${build.dir}/old-builds">
		    	<include name="${project.site.builds.relpath.prefix}*/build-info.xml"/>
		    </fileset>
		    <fileset dir="${build.dir}/old-builds">
		    	<include name="rss.xml"/>
		    </fileset>
		  </ftp>
	</target>	
	
	<!-- ================================= 
         target: _upload-build-to-site
         
         Uploads all build files to the project site with FTP. Site HTML files are not copied.
        ================================= -->
	<target name="_upload-build-to-site"
		    depends="_check_site_root_folder"
		    if="defined.project.site.enabled">
		<property name="tmp.project.site.build.dir" value="${project.site.real.root}${project.site.builds.relpath.prefix}${version.full}" />
		
		<!-- First delete the build folder if it exists -->
		<ftp action="del"
			server="${project.site.deploy.ftp.hostname}"
	        port="${project.site.deploy.ftp.port}"
	        userid="${project.site.deploy.ftp.username}"
	        password="${project.site.deploy.ftp.password}">
			<fileset>
				<include name="${tmp.project.site.build.dir}/**/*"/>
			</fileset>
		</ftp>		
		
		<!-- Create the build folder -->
 		<ftp action="mkdir"
		     server="${project.site.deploy.ftp.hostname}"
			 port="${project.site.deploy.ftp.port}"
			 userid="${project.site.deploy.ftp.username}"
			 password="${project.site.deploy.ftp.password}"
			 remotedir="${tmp.project.site.build.dir}">
		</ftp>	

		<!-- Upload the files -->
 		<ftp action="put"
		     server="${project.site.deploy.ftp.hostname}"
			 port="${project.site.deploy.ftp.port}"
			 userid="${project.site.deploy.ftp.username}"
			 password="${project.site.deploy.ftp.password}"
			 remotedir="${tmp.project.site.build.dir}">
			<fileset dir="${dist.dir}">
				<patternset refid="all.non.cvs.files" />
				<patternset refid="all.non.vss.files" />
				<patternset refid="all.non.svn.files" />
				<exclude name="site/**" />
			</fileset>
		</ftp>
	</target>		
				
	<!-- ================================= 
         target: _upload-site-files-to-site
         
         Uloads project site files to the web server project folder from the dist/site folder with FTP.
        ================================= -->
	<target name="_upload-site-files-to-site">
		<!-- First delete the site files if they exist -->
		<ftp action="del"
			server="${project.site.deploy.ftp.hostname}"
	        port="${project.site.deploy.ftp.port}"
	        userid="${project.site.deploy.ftp.username}"
	        password="${project.site.deploy.ftp.password}"
         	remotedir="${project.site.real.root}">
			<fileset refid="non.project.site.content" />
		</ftp>	
		
		<!-- Upload the files -->
 		<ftp action="put"
		     server="${project.site.deploy.ftp.hostname}"
			 port="${project.site.deploy.ftp.port}"
			 userid="${project.site.deploy.ftp.username}"
			 password="${project.site.deploy.ftp.password}"
			 remotedir="${project.site.real.root}">
			<fileset dir="${dist.site}">
				<patternset refid="all.non.svn.files" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="build-info.xml" />	
			</fileset>		 			
		</ftp>		
	</target> 
	
	
	<!-- ================================= 
         target: _build-site-files
         
         Builds project web site HTML files into dist/site folder.
        ================================= -->	
	<target name="_build-site-files" 
			depends="_prepare-site-build-folder,_download-project-info">
		<check-property property="project.site.main.title" />
		<check-property property="project.site.downloadarea.title" />		
		<mkdir dir="${dist.site}" />		
		
		<xpathselect file="${build.dir}/build-info-list.xml"
					 xpath="/buildinfolist/buildinfo/@version"
					 property="buildinfo.latest.project.version" />		

		<freemarker-render destination="${dist.site}">
			<fileset dir="${build.site}">
				<include name="**/*.ftl" />
				<exclude name="include/*.ftl" />
				<exclude name="custom/*" />
			</fileset> 			
		</freemarker-render>
		
		<copy todir="${dist.site}">
			<fileset dir="${build.site}">
				<patternset refid="all.non.svn.files" />
				<exclude name="**/*.ftl" />
				<exclude name="custom/*" />
			</fileset>
		</copy>			
	</target>		
	
	<!-- ================================= 
         target: _prepare-site-build-folder
         
         Copies all site file .ftl files to the build/site folder.
        ================================= -->	
	<target name="_prepare-site-build-folder">
		<mkdir dir="${build.site}" />		
	
		<!-- Copy site files from src/site and sdk/build/site to the build/site folder. -->
		<if>
			<available file="${sdk.build.site}" />
			<then>						
				<copy todir="${build.site}">
					<fileset dir="${sdk.build.site}">
						<patternset refid="all.non.cvs.files" />
						<patternset refid="all.non.vss.files" />
						<patternset refid="all.non.svn.files" />						
					</fileset> 			
				</copy>		
			</then>
		</if>
		
		<if>
			<available file="${src.site}" />
			<then>
				<copy todir="${build.site}" overwrite="true">
					<fileset dir="${src.site}">
						<patternset refid="all.non.cvs.files" />
						<patternset refid="all.non.vss.files" />
					 	<patternset refid="all.non.svn.files" />						
	 				</fileset> 			
	 			</copy>
			</then>
		</if>
	</target>
	
	<!-- ================================= 
        target: deploy-site
       ================================= -->	
	<target name="deploy-site" 
			description="Builds a project web site and deploys it to the web server. This will also create a release build first."
  		    depends="_checkdefined,_check_site_root_folder"
	        if="defined.project.site.enabled">
		<exec-targets targetnames="_merge-build-info,_build-site-files,_upload-site-files-to-site" />
		<echo>Project site updated at ${project.site.real.url}/index.html</echo>
	</target>
</project>	