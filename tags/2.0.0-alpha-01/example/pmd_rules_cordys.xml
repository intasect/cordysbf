<?xml version="1.0"?>

<ruleset name="Cordys Rule Set"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

  <description>
	Cordys Rule Set with priority#1
  </description>

  <!-- Basic Rules with Cordys Priority #1 -->  
  <rule ref="rulesets/basic.xml/EmptyCatchBlock" message="Avoid empty catch blocks.">
     <priority>3</priority>
  </rule>
   
  
  <rule ref="rulesets/basic.xml/OverrideBothEqualsAndHashcode" message="Ensure you override both equals() and hashCode().">
     <priority>1</priority>
  </rule>
  
  
  <rule ref="rulesets/basic.xml/ClassCastExceptionWithToArray" message="This usage of the Collection.toArray() method will throw a ClassCastException.">
     <priority>1</priority>
  </rule>         
  
  
  <!-- Clone - rules with priority#1 -->  
  <rule ref="rulesets/clone.xml/ProperCloneImplementation" message="Object clone() should be implemented with super.clone().">
     <priority>1</priority>
  </rule>

  <rule ref="rulesets/clone.xml/CloneThrowsCloneNotSupportedException" message="Clone Throws Clone Not Supported Exception">
     <priority>1</priority>
  </rule>

  <rule ref="rulesets/clone.xml/CloneMethodMustImplementCloneable" message="Clone Method Must Implement Cloneable">
     <priority>1</priority>
  </rule>
  
  

  <!-- Design rules with Priority#1 -->
  
  <rule ref="rulesets/design.xml/SwitchStmtsShouldHaveDefault" message="Switch Stmts Should Have a default label.">
     <priority>1</priority>
  </rule>    
  
  <rule ref="rulesets/design.xml/CloseResource" message="Ensure that resources like this {0} object are closed after use">
     <priority>1</priority>
  </rule>    
  
  <rule ref="rulesets/design.xml/DefaultLabelNotLastInSwitchStmt" message="The default label should be the last label in a switch statement">
     <priority>1</priority>
  </rule>
          
  <rule ref="rulesets/design.xml/NonThreadSafeSingleton" message="Singleton is not thread safe">
     <priority>5</priority>
  </rule>   
  
  <rule ref="rulesets/design.xml/UnsynchronizedStaticDateFormatter" message="Unsynchronized Static Date Formatter">
     <priority>1</priority>
  </rule>  

  <!-- Finalizers - all rules should be used -->  
  
  <rule ref="rulesets/finalizers.xml/EmptyFinalizer" message="Avoid empty finalize methods">
     <priority>1</priority>
  </rule>
  
  <rule ref="rulesets/finalizers.xml/FinalizeOnlyCallsSuperFinalize" message="Finalize should do something besides just calling super.finalize()">
     <priority>1</priority>
  </rule>  
  
  <rule ref="rulesets/finalizers.xml/FinalizeOverloaded" message="Finalize methods should not be overloaded">
     <priority>1</priority>
  </rule>

  <rule ref="rulesets/finalizers.xml/FinalizeDoesNotCallSuperFinalize" message="Last statement in finalize method should be a call to super.finalize()">
     <priority>1</priority>
  </rule>
  
  <rule ref="rulesets/finalizers.xml/FinalizeShouldBeProtected" message="If you override finalize(), make it protected">
     <priority>1</priority>
  </rule>

  <rule ref="rulesets/finalizers.xml/AvoidCallingFinalize" message="Avoid calling finalize() explicitly">
     <priority>1</priority>
  </rule> 

  <!-- JUnit Tests - only prio#1 rules should be used -->    

  <rule ref="rulesets/optimizations.xml/AvoidArrayLoops" message="System.arrayCopy is more efficient">
     <priority>1</priority>
  </rule>
    
  
  <!-- Strict Exceptions – only prio#1 rules” -->    
  <rule ref="rulesets/strictexception.xml/SignatureDeclareThrowsException" message="A method/constructor shouldn't explicitly throw java.lang.Exception">
     <priority>4</priority>
  </rule>
   
  <rule ref="rulesets/strictexception.xml/ExceptionAsFlowControl" message="Avoid using exceptions as flow control">
     <priority>1</priority>
  </rule>
 
 
  <rule ref="rulesets/strictexception.xml/AvoidThrowingRawExceptionTypes" message="Avoid throwing raw exception types.">
     <priority>3</priority>
  </rule> 
 
  <!-- String - only prio#1 rules -->
  
  
  <rule ref="rulesets/strings.xml/AvoidDuplicateLiterals" message="The String literal {0} appears {1} times in this file; the first occurrence is on line {2}">
     <priority>5</priority>
  </rule>     
            
    
  <!-- Cordys Logging - MoreThanOneLogger, LoggerIsNotStaticFinal, SystemPrintln, AvoidPrintStackTrace -->
    <rule name="MoreThanOneLogger"
         message="Class contains more than one logger."
		 class="net.sourceforge.pmd.rules.XPathRule"
		 externalInfoUrl="http://pmd.sourceforge.net/rules/logging-java.html#MoreThanOneLogger">
     <description>
Normally only one logger is used in each class.
	 </description>
     <priority>4</priority>
     <properties>
         <property name="xpath">
             <value>
                 <![CDATA[
//ClassOrInterfaceBody[count(//FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image='CordysLogger']) > 1]
                ]]>
             </value>
         </property>
     </properties>
     <example>
 <![CDATA[
class Foo{
    private final static CordysLogger LOGGER = Logger.getLogger(Foo.class.getName());
    // It is very rare to see two loggers on a class, normally
    // log information is multiplexed by levels
   private final static CordysLogger EXTRA_LOGGER = Logger.getLogger(Foo.class.getName());
}
]]>
     </example>
     </rule>

    <rule name="SystemPrintln"
         message="System.out.print is used"
         class="net.sourceforge.pmd.rules.XPathRule"
          externalInfoUrl="http://pmd.sourceforge.net/rules/logging-java.html#SystemPrintln">
     <description>
System.(out|err).print is used, consider using a logger.
     </description>
     <priority>3</priority>
     <properties>
         <property name="xpath">
             <value>
                 <![CDATA[
//Name[
    starts-with(@Image, 'System.out.print')
    or
    starts-with(@Image, 'System.err.print')
    ]
                ]]>
             </value>
         </property>
     </properties>
     <example>
 <![CDATA[
class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());
    public void testA () {
        System.out.println("Entering test");
        // Better use this
        log.fine("Entering test");
    }
}
]]>
     </example>
     </rule>

    <rule  name="AvoidPrintStackTrace"
           message="Avoid printStackTrace(); use a logger call instead."
           class="net.sourceforge.pmd.rules.XPathRule"
		   externalInfoUrl="http://pmd.sourceforge.net/rules/logging-java.html#AvoidPrintStackTrace">
           <description>
Avoid printStackTrace(); use a logger call instead.
           </description>
           <priority>3</priority>
           <properties>
             <property name="xpath">
             <value>
<![CDATA[
//PrimaryExpression
 [PrimaryPrefix/Name[contains(@Image,'printStackTrace')]]
 [PrimarySuffix[not(boolean(Arguments/ArgumentList/Expression))]]
]]>
             </value>
             </property>
           </properties>
           <example>
<![CDATA[
class Foo {
 void bar() {
  try {
   // do something
  } catch (Exception e) {
   e.printStackTrace();
  }
 }
}
]]>
           </example>
    </rule>              
    <rule  name="AvoidDocumentCreation"
           message="Avoid creating new Nom Documents, use the NomDocumentPool instead"
		   class="net.sourceforge.pmd.rules.XPathRule">
           <description>
Avoid creating new Nom Documents, use the NomDocumentPool instead. Creating Nom Documents yourself is a stability risk.
		   </description>
           <priority>3</priority>
           <properties>
             <property name="xpath">
             <value>
<![CDATA[
//AllocationExpression/ClassOrInterfaceType[@Image='Document']
]]>
             </value>
             </property>
           </properties>
           <example>
<![CDATA[
class Foo {
 void bar() {
 int ele = 0;
 try {
   Document doc = new Document();
   int ele = doc.createElement("element");
   // do something
  } finally {
   Node.delete(ele);
  }
  
  return ele; // instable, node will become invalid on GC of doc.
 }
}
]]>
           </example>
    </rule>              
</ruleset>
